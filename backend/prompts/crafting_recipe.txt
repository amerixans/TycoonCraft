You are authoring one TycoonCraft object definition by completing a provided JSON according to the schema below.
Return only valid values for the provided fields (the JSON structure itself is supplied externally).
Do not include commentary, reasoning, examples, or extra properties.

Game context (authoritative)
• TycoonCraft is a civilization-crafting tycoon. Players combine two objects to discover/craft new ones.
• Only objects from the player’s unlocked Era can be crafted/placed; discovery of future items occurs elsewhere.
• Each object passively generates coins per second while operational. Some objects (rare) also generate time crystals per second.
• 1 tile = 1 meter (use this for footprint vs. size consistency).

Eras (AUTHORITATIVE: enum + details; use these exact names for era_name)

Hunter-Gatherer
• Unique Mechanic (applies to items in/after this era): Decay — basic items “burn out” after a short operation window, yielding salvage.
• Keystone to Unlock: Campfire (Fire + Wood)
• Crystal Gate (suggested): 0
• Core Examples: Berry Patch, Stone Tool, Campfire

Agriculture
• Unique Mechanic (applies to items in/after this era): Growth — farmables can be replanted to extend operation (choice: cash out vs. regrow).
• Keystone to Unlock: Fertilizer (Animal + Plant)
• Crystal Gate (suggested): 10
• Core Examples: Farm, Granary, Well

Metallurgy
• Unique Mechanic (applies to items in/after this era): Extraction Chains — Mines output Ore; smelters convert to Ingots (intermediate goods).
• Keystone to Unlock: Metal (Ore + Fire)
• Crystal Gate (suggested): 50
• Core Examples: Mine, Furnace, Anvil

Steam & Industry
• Unique Mechanic (applies to items in/after this era): Throughput — buildings have input buffers; upgrades increase buffers (fewer deadtimes).
• Keystone to Unlock: Boiler (Metal + Water)
• Crystal Gate (suggested): 250
• Core Examples: Steam Engine, Factory, Rail

Electric Age
• Unique Mechanic (applies to items in/after this era): Power Grid — powered buildings gain % income; overdraw causes brownouts (temporary debuffs).
• Keystone to Unlock: Generator (Metal + Magnet)
• Crystal Gate (suggested): 1,200
• Core Examples: Dynamo, Power Lines, Lightbulb

Computing
• Unique Mechanic (applies to items in/after this era): Automation — craft queues auto-repeat; bot slots reduce cooldowns.
• Keystone to Unlock: Microchip (Silicon + Circuit)
• Crystal Gate (suggested): 6,000
• Core Examples: Computer, Router, Data Center

Futurism
• Unique Mechanic (applies to items in/after this era): Synthesis — fabricators convert raw inputs to any tagged intermediate at an efficiency loss.
• Keystone to Unlock: Nanofab (Assembler + Microchip)
• Crystal Gate (suggested): 30,000
• Core Examples: Drone Bay, Fusion Prototype

Interstellar
• Unique Mechanic (applies to items in/after this era): Logistics Lanes — routes between districts add global multipliers; congestion penalties apply.
• Keystone to Unlock: FTL Relay (Fusion + Crystal)
• Crystal Gate (suggested): 150,000
• Core Examples: Orbital Farm, Asteroid Mine

Arcana
• Unique Mechanic (applies to items in/after this era): Enchantment — socket runes to items for additive/multiplicative bonuses; runes wear over time.
• Keystone to Unlock: Ley Capacitor (Crystal + Ritual)
• Crystal Gate (suggested): 800,000
• Core Examples: Mana Well, Transmutation Lab

Beyond
• Unique Mechanic (applies to items in/after this era): Sim Layers — instantiate “simulated duplicates” of a layout for burst yield, with cooldown.
• Keystone to Unlock: Seed AI (Quantum Core + Archive)
• Crystal Gate (suggested): 4,000,000
• Core Examples: World Forge, Reality Printer

Era rule (must obey): the output object’s era_name must be the higher era of the two inputs. Do not leap beyond that era. If a concept implies a later mechanic, downgrade it to the chosen era’s capabilities.

Keystone policy (is_keystone)
• Set is_keystone: true if and only if the object’s name matches the era’s “Keystone to Unlock” in Section 2. Otherwise set false.
• When true, prefer a small cap_per_civ (e.g., 1–3).

Categories (enum for category)
natural, structure, farm, mine, factory, power, logistics, research, cultural, housing, magic, wonder
Choose the category that best matches the object’s primary purpose. This powers global modifiers and UI grouping.

Economy & pacing (targets, not hard limits)
• cost (coins): positive number; scales by era (later eras are orders of magnitude higher).
• ROI target (coins): aim for break-even in
• early eras (1–4): 30–500 seconds,
• mid (5–7): 70–1000 seconds,
• late (8–10): 30–2000 seconds.
• income_per_second ≈ cost / (break_even_seconds * 60) × (0.9–1.1 variance).
• time_crystal_cost: usually 0 (very rare to require crystals).
• time_crystal_generation: per-second rate; usually 0 (rare objects may use very small values, e.g., 0.001–0.01).

Timings & lifecycle
• build_time_sec: 0–86,400 (prefer short; cooldowns are handled elsewhere).
• operation_duration_sec: duration before automatic retirement. Typical: 3×–20× the break-even time (in seconds).
• retire_payout.coins_pct: refund fraction at natural retirement (e.g., 0.1–5).
• sellback_pct: refund fraction on manual delete (often ≤ retire payout; e.g., 0.1–0.3).
• These two payouts must be independent.

Limits & placement
• cap_per_civ: integer limit or null for unlimited. Use a small cap for keystones/wonders; null otherwise.
• footprint.w / footprint.h: integers 1–20 tiles.
• size: visual size in meters (0.1–20). Keep roughly consistent with footprint (1 tile = 1 meter).
• Heuristic: size ≈ max(w, h) or a plausible real-world scale.

Quality & flavor
• quality_tier: common | uncommon | rare | epic | legendary (use sparingly; affects perceived prestige).
• flavor_text: short, evocative, occasionally humorous, spoiler-free.

Global auras (global_modifiers, optional)
Provide only if the object is plausibly an aura/wonder/power hub. Defaults to none ([]).
Each modifier:
• active_when: placed or operational (prefer operational).
• affected_categories: one or more from the category enum.
• Optional affected_tags may be omitted.
• Multipliers typical ranges:
• income_multiplier: 0.9–1.25 (avoid power creep; wonders may go to 1.4 with max_stacks=1).
• cost_multiplier, build_time_multiplier, operation_duration_multiplier: usually 0.9–1.1.
• stacking: multiplicative (default).
• max_stacks: 1 for strong auras; >1 only for small effects.

Field-by-field reminders (must satisfy schema)
• Required: object_name, era_name, is_keystone, category, cost, income_per_second, build_time_sec, operation_duration_sec, retire_payout, sellback_pct, cap_per_civ, footprint.
• Omit any property not in the provided JSON. No extra fields.
• All numbers must be non-negative where applicable and within reasonable ranges given era.

Output rules
• Return only the completed JSON values (the container JSON is provided separately).
• No prose, no lists, no rationale, no markdown.
• Values must be internally consistent with the two inputs and era rule.

⸻

INPUT OBJECTS (combine these two to define the output object)

OBJECT A: {{object_a_capsule}}
OBJECT B: {{object_b_capsule}}