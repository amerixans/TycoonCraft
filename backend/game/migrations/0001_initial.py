# Generated by Django 4.2.7 on 2025-10-11 23:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GameObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_name', models.CharField(max_length=200, unique=True)),
                ('era_name', models.CharField(max_length=50)),
                ('is_keystone', models.BooleanField(default=False)),
                ('category', models.CharField(max_length=50)),
                ('quality_tier', models.CharField(default='common', max_length=50)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=20)),
                ('time_crystal_cost', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('income_per_second', models.DecimalField(decimal_places=4, max_digits=20)),
                ('time_crystal_generation', models.DecimalField(decimal_places=6, default=0, max_digits=20)),
                ('build_time_sec', models.IntegerField(default=0)),
                ('operation_duration_sec', models.IntegerField()),
                ('retire_payout_coins_pct', models.DecimalField(decimal_places=4, max_digits=5)),
                ('sellback_pct', models.DecimalField(decimal_places=4, max_digits=5)),
                ('cap_per_civ', models.IntegerField(blank=True, null=True)),
                ('footprint_w', models.IntegerField()),
                ('footprint_h', models.IntegerField()),
                ('size', models.DecimalField(decimal_places=2, max_digits=10)),
                ('global_modifiers', models.JSONField(blank=True, default=list)),
                ('flavor_text', models.TextField(blank=True, max_length=200)),
                ('image_path', models.CharField(blank=True, max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlayerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coins', models.DecimalField(decimal_places=2, default=100, max_digits=20)),
                ('time_crystals', models.DecimalField(decimal_places=2, default=0, max_digits=20)),
                ('current_era', models.CharField(default='Hunter-Gatherer', max_length=50)),
                ('last_coin_update', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EraUnlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('era_name', models.CharField(max_length=50)),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='era_unlocks', to='game.playerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Discovery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discovered_at', models.DateTimeField(auto_now_add=True)),
                ('game_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.gameobject')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discoveries', to='game.playerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='CraftingRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('discovered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('object_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes_as_a', to='game.gameobject')),
                ('object_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes_as_b', to='game.gameobject')),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes_as_result', to='game.gameobject')),
            ],
        ),
        migrations.CreateModel(
            name='RateLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('limit_type', models.CharField(max_length=50)),
                ('count', models.IntegerField(default=0)),
                ('window_start', models.DateTimeField(default=django.utils.timezone.now)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rate_limits', to='game.playerprofile')),
            ],
            options={
                'indexes': [models.Index(fields=['limit_type', 'window_start'], name='game_rateli_limit_t_8093f1_idx')],
                'unique_together': {('player', 'limit_type')},
            },
        ),
        migrations.CreateModel(
            name='PlacedObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.IntegerField()),
                ('y', models.IntegerField()),
                ('placed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('build_complete_at', models.DateTimeField()),
                ('retire_at', models.DateTimeField()),
                ('is_operational', models.BooleanField(default=False)),
                ('is_building', models.BooleanField(default=True)),
                ('game_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.gameobject')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='placed_objects', to='game.playerprofile')),
            ],
            options={
                'indexes': [models.Index(fields=['player', 'is_operational'], name='game_placed_player__4a4ed0_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='gameobject',
            index=models.Index(fields=['object_name'], name='game_gameob_object__4b2786_idx'),
        ),
        migrations.AddIndex(
            model_name='gameobject',
            index=models.Index(fields=['era_name'], name='game_gameob_era_nam_0bbe83_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eraunlock',
            unique_together={('player', 'era_name')},
        ),
        migrations.AddIndex(
            model_name='discovery',
            index=models.Index(fields=['player', 'game_object'], name='game_discov_player__b3e49c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='discovery',
            unique_together={('player', 'game_object')},
        ),
        migrations.AddIndex(
            model_name='craftingrecipe',
            index=models.Index(fields=['object_a', 'object_b'], name='game_crafti_object__549049_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='craftingrecipe',
            unique_together={('object_a', 'object_b')},
        ),
    ]
